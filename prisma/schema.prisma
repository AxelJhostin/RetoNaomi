// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELO PARA LOS USUARIOS (DUEÑOS DE RESTAURANTES)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación: Un usuario puede tener muchos productos
  products  Product[]
  staff     Staff[]   @relation("StaffMembers")
  tables    Table[]
}

// MODELO PARA LOS ROLES DEL PERSONAL
model Role {
  id        String   @id @default(cuid())
  name      String   @unique // Ej: "Mesero", "Cocinero", "Admin"
  createdAt DateTime @default(now())
  staff     Staff[]
}

// MODELO PARA LOS PRODUCTOS DEL MENÚ
model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  category    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relación: Un producto pertenece a un usuario (dueño)
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
}

// MODELO PARA EL PERSONAL (MESEROS, COCINEROS)
model Staff {
  id        String   @id @default(cuid())
  name      String
  pin       String  @unique   // Un PIN de 4 o 6 dígitos para un login rápido
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación: Un miembro del personal pertenece a un restaurante (dueño)
  ownerId   String
  owner     User     @relation("StaffMembers", fields: [ownerId], references: [id])

  // Relación: Un miembro del personal tiene un rol
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  BILLING
}

model Table {
  id        String      @id @default(cuid())
  name      String      // ej: "Mesa 5", "Terraza 1"
  status    TableStatus @default(AVAILABLE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relación: Una mesa pertenece a un restaurante (dueño)
  ownerId   String
  owner     User        @relation(fields: [ownerId], references: [id])
}
